{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello. # This is Ansh Sachdeva (aka root-ansh ) , a 21 year old B.tech Engineering Student from New Delhi,India. I have deep passions for Android App Development, Programming in python, and Data Analysis/Deep Learning. I recently received Google certification as an Associate Android Developer . Motto Full of curiosities and ambitions, I am here to leave a mark in the world, by building something bigger than myself, for the betterment of humanity My resume can be found here . Contact details # Resume","title":"About Me"},{"location":"#hello","text":"This is Ansh Sachdeva (aka root-ansh ) , a 21 year old B.tech Engineering Student from New Delhi,India. I have deep passions for Android App Development, Programming in python, and Data Analysis/Deep Learning. I recently received Google certification as an Associate Android Developer . Motto Full of curiosities and ambitions, I am here to leave a mark in the world, by building something bigger than myself, for the betterment of humanity My resume can be found here .","title":"Hello."},{"location":"#contact-details","text":"Resume","title":"Contact details"},{"location":"tab_blogs/blog_summary/","text":"Welcome! # Here you would find somethings that i wanna write about. Since the day I came into College(and maybe even before that, but then it was school and I was more focussed towards the non tech subjects), I have been trying to learn something new in tech world everyday. I am a fan of everything techy : be it be new smartphones, new games, new webseries on Startups or Tech or just a new technology. Up till now, I think I have learned a decent amount of stuff related to java, python, android , data analysis, a little about IOT,cloud computing, google assistant, animations, designing, gamedev , interactive content, Advertsisements and some web dev. I even earned a few bucks in internships from these. But let me tell you, 99% of my knowledge comes from this blessed internet.Youtube videos, Github, StackOverflow(its a God site, i tell you) , forums, medium, developer docs... you name it. I am eternally grateful to this worldwide connection of anonymous and non-anonymous people who makes technology and resources available to every human. So, my aim of creating this site was to open source everything that I have learned so far. It would be beneficial in 2 ways : 1)this would create a digital record of my learnings so I won't worry if i forget about them and 2) you might find this content useful. -- Ansh . PS: These blogs are intended to be private and might contain mix of hindi,english/klingon,high valyrian,dothraki and binary. For better articles , visit my public blog account . There is also a hidden link on this page having some extra content that i would like to keep hidden, but kudos if you find it :)","title":"Introduction"},{"location":"tab_blogs/blog_summary/#welcome","text":"Here you would find somethings that i wanna write about. Since the day I came into College(and maybe even before that, but then it was school and I was more focussed towards the non tech subjects), I have been trying to learn something new in tech world everyday. I am a fan of everything techy : be it be new smartphones, new games, new webseries on Startups or Tech or just a new technology. Up till now, I think I have learned a decent amount of stuff related to java, python, android , data analysis, a little about IOT,cloud computing, google assistant, animations, designing, gamedev , interactive content, Advertsisements and some web dev. I even earned a few bucks in internships from these. But let me tell you, 99% of my knowledge comes from this blessed internet.Youtube videos, Github, StackOverflow(its a God site, i tell you) , forums, medium, developer docs... you name it. I am eternally grateful to this worldwide connection of anonymous and non-anonymous people who makes technology and resources available to every human. So, my aim of creating this site was to open source everything that I have learned so far. It would be beneficial in 2 ways : 1)this would create a digital record of my learnings so I won't worry if i forget about them and 2) you might find this content useful. -- Ansh . PS: These blogs are intended to be private and might contain mix of hindi,english/klingon,high valyrian,dothraki and binary. For better articles , visit my public blog account . There is also a hidden link on this page having some extra content that i would like to keep hidden, but kudos if you find it :)","title":"Welcome!"},{"location":"tab_blogs/android/enums_and_intDefs/","text":"Enums and @IntDefs # Enumerations serve the purpose of representing a group of named constants in a programming language We often use Enums to make our cool, restricted group of values tht a function or statement could take. But they are usually considered a bad practise in android because Enums often require more than twice as much memory as static constants. Enter IntDef # @IntDef is a way of replacing an integer enum where there's a parameter that should only accept explicit int values.We can use IntDef to ensure that the value is one of the expected values by adding this annotation. For eg: public class example { @IntDef( {Type.TYPE_MUSIC,Type.TYPE_PHOTO,Type.TYPE_TEXT}) public @interface Type{ int TYPE_MUSIC = 0; int TYPE_PHOTO = 21; int TYPE_TEXT = 42; } // Mark the argument as restricted to these enumerated types public void getItemType(@Type int itemType) { int res = itemType; } } The function will allow user to pass any integer value, but will give a lint warning if value is not Type.TYPE_MUSIC , Type.TYPE_PHOTO or Type.TYPE_TEXT (yes, even if 0,21 or 42 are passed directly too ).","title":"Enums and @IntDefs"},{"location":"tab_blogs/android/enums_and_intDefs/#enums-and-intdefs","text":"Enumerations serve the purpose of representing a group of named constants in a programming language We often use Enums to make our cool, restricted group of values tht a function or statement could take. But they are usually considered a bad practise in android because Enums often require more than twice as much memory as static constants.","title":"Enums and @IntDefs"},{"location":"tab_blogs/android/enums_and_intDefs/#enter-intdef","text":"@IntDef is a way of replacing an integer enum where there's a parameter that should only accept explicit int values.We can use IntDef to ensure that the value is one of the expected values by adding this annotation. For eg: public class example { @IntDef( {Type.TYPE_MUSIC,Type.TYPE_PHOTO,Type.TYPE_TEXT}) public @interface Type{ int TYPE_MUSIC = 0; int TYPE_PHOTO = 21; int TYPE_TEXT = 42; } // Mark the argument as restricted to these enumerated types public void getItemType(@Type int itemType) { int res = itemType; } } The function will allow user to pass any integer value, but will give a lint warning if value is not Type.TYPE_MUSIC , Type.TYPE_PHOTO or Type.TYPE_TEXT (yes, even if 0,21 or 42 are passed directly too ).","title":"Enter IntDef"},{"location":"tab_blogs/android/exoplayer_classes/","text":"Ac3Extractor,Ac3Reader,Ac3Util,Ac3Util.SyncFrameInfo,Ac3Util.SyncFrameInfo.StreamType,Ac4Extractor, Ac4Reader,Ac4Util,Ac4Util.SyncFrameInfo,ActionFileUpgradeUtil,ActionFileUpgradeUtil.DownloadIdProvider, AdaptationSet,AdaptiveMediaSourceEventListener,AdaptiveTrackSelection,AdaptiveTrackSelection.Factory,AdPlaybackState,AdPlaybackState.AdGroup, AdPlaybackState.AdState,AdsLoader,AdsLoader.AdViewProvider,AdsLoader.EventListener,AdsMediaSource,AdsMediaSource.AdLoadException, AdsMediaSource.AdLoadException.Type,AdsMediaSource.MediaSourceFactory,AdtsExtractor,AdtsExtractor.Flags,AdtsReader,AesCipherDataSink,AesCipherDataSource,AesFlushingCipher,Allocation,Allocator,AmrExtractor,AmrExtractor.Flags,AnalyticsCollector,AnalyticsCollector.Factory,AnalyticsListener,AnalyticsListener.EventTime,ApicFrame,AspectRatioFrameLayout,AspectRatioFrameLayout.AspectRatioListener,AspectRatioFrameLayout.ResizeMode,Assertions,AssetDataSource,AssetDataSource.AssetDataSourceException,AtomicFile, AudioAttributes,AudioAttributes.Builder,AudioCapabilities,AudioCapabilitiesReceiver,AudioCapabilitiesReceiver.Listener,AudioDecoderException,AudioFocusManager,AudioFocusManager.PlayerCommand,AudioFocusManager.PlayerControl,AudioListener,AudioProcessor,AudioProcessor.UnhandledFormatException,AudioRendererEventListener,AudioRendererEventListener.EventDispatcher,AudioSink,AudioSink.ConfigurationException,AudioSink.InitializationException,AudioSink.Listener,AudioSink.WriteException,AuxEffectInfo,AvcConfig,BandwidthMeter,BandwidthMeter.EventListener,BaseAudioProcessor,BaseDataSource,BaseMediaChunk,BaseMediaChunkIterator,BaseMediaChunkOutput,BaseMediaSource,BasePlayer,BasePlayer.ListenerHolder,BasePlayer.ListenerInvocation,BaseRenderer,BaseTrackSelection, BehindLiveWindowException,BinaryFrame,BinarySearchSeeker,BinarySearchSeeker.BinarySearchSeekMap,BinarySearchSeeker.DefaultSeekTimestampConverter,BinarySearchSeeker.OutputFrameHolder,BinarySearchSeeker.SeekOperationParams,BinarySearchSeeker.SeekTimestampConverter,BinarySearchSeeker.TimestampSearchResult,BinarySearchSeeker.TimestampSeeker,Buffer,BufferSizeAdaptationBuilder,BufferSizeAdaptationBuilder.DynamicFormatFilter,ByteArrayDataSink,ByteArrayDataSource,C,C.AudioContentType,C.AudioFlags,C.AudioFocusGain,C.AudioUsage,C.BufferFlags,C.ColorRange,C.ColorSpace,C.ColorTransfer,C.ContentType,C.CryptoMode,C.Encoding,C.NetworkType, C.PcmEncoding,C.Projection,C.RoleFlags,C.SelectionFlags,C.StereoMode,C.StreamType,C.VideoScalingMode,Cache,Cache.CacheException,Cache.Listener,CacheDataSink,CacheDataSink.CacheDataSinkException,CacheDataSinkFactory,CacheDataSource,CacheDataSource.CacheIgnoredReason,CacheDataSource.EventListener,CacheDataSource.Flags,CacheDataSourceFactory,CachedRegionTracker,CacheEvictor,CacheKeyFactory,CacheSpan,CacheUtil,CacheUtil.ProgressListener,CameraMotionListener,CameraMotionRenderer,CanvasRenderer,CaptionStyleCompat,CaptionStyleCompat.EdgeType,CastPlayer,Cea608Decoder,Cea708Decoder,Cea708InitializationData,CeaUtil,ChapterFrame,ChapterTocFrame,Chunk,ChunkExtractorWrapper,ChunkExtractorWrapper.TrackOutputProvider,ChunkHolder,ChunkIndex,ChunkSampleStream,ChunkSampleStream.ReleaseCallback,ChunkSource,ClippingMediaPeriod,ClippingMediaSource,ClippingMediaSource.IllegalClippingException, ClippingMediaSource.IllegalClippingException.Reason,Clock,CodecSpecificDataUtil,ColorInfo,ColorParser,CommentFrame,CompositeMediaSource,CompositeSequenceableLoader,CompositeSequenceableLoaderFactory,ConcatenatingMediaSource,ConditionVariable,ConstantBitrateSeekMap,ContainerMediaChunk,ContentDataSource,ContentDataSource.ContentDataSourceException,ContentMetadata,ContentMetadataMutations,ControlDispatcher,CronetDataSource,CronetDataSource.InterruptedIOException,CronetDataSource.OpenException,CronetDataSourceFactory,CronetEngineWrapper,CronetEngineWrapper.CronetEngineSource,CryptoInfo,Cue,Cue.AnchorType,Cue.LineType,Cue.TextSizeType,DashChunkSource,DashChunkSource.Factory,DashDownloader,DashManifest,DashManifestParser,DashManifestParser.RepresentationInfo,DashManifestStaleException,DashMediaSource,DashMediaSource.Factory,DashSegmentIndex,DashUtil,DashWrappingSegmentIndex,DatabaseIOException,DatabaseProvider,DataChunk,DataSchemeDataSource,DataSink,DataSink.Factory,DataSource,DataSource.Factory,DataSourceException,DataSourceInputStream,DataSpec,DataSpec.Flags,DataSpec.HttpMethod,DebugTextViewHelper,Decoder,DecoderCounters, DecoderInputBuffer,DecoderInputBuffer.BufferReplacementMode,DecryptionException,DecryptionResource,DecryptionResource.Owner,DefaultAllocator,DefaultAnalyticsListener,DefaultAudioSink,DefaultAudioSink.AudioProcessorChain,DefaultAudioSink.DefaultAudioProcessorChain,DefaultAudioSink.InvalidAudioTrackTimestampException,DefaultBandwidthMeter,DefaultBandwidthMeter.Builder,DefaultCastOptionsProvider,DefaultCompositeSequenceableLoaderFactory,DefaultContentMetadata,DefaultControlDispatcher,DefaultDashChunkSource,DefaultDashChunkSource.Factory,DefaultDashChunkSource.RepresentationHolder,DefaultDashChunkSource.RepresentationSegmentIterator,DefaultDatabaseProvider,DefaultDataSource,DefaultDataSourceFactory,DefaultDownloaderFactory,DefaultDownloadIndex,DefaultDrmSessionEventListener,DefaultDrmSessionManager,DefaultDrmSessionManager.MissingSchemeDataException,DefaultDrmSessionManager.Mode,DefaultExtractorInput,DefaultExtractorsFactory,DefaultHlsDataSourceFactory,DefaultHlsExtractorFactory,DefaultHlsPlaylistParserFactory,DefaultHlsPlaylistTracker,DefaultHttpDataSource,DefaultHttpDataSourceFactory,DefaultLoadControl,DefaultLoadControl.Builder,DefaultLoadErrorHandlingPolicy,DefaultMediaSourceEventListener,DefaultRenderersFactory,DefaultRenderersFactory.ExtensionRendererMode,DefaultSsChunkSource,DefaultSsChunkSource.Factory,DefaultTimeBar,DefaultTrackNameProvider,DefaultTrackSelector, DefaultTrackSelector.AudioTrackScore,DefaultTrackSelector.Parameters,DefaultTrackSelector.ParametersBuilder,DefaultTrackSelector.SelectionOverride,DefaultTsPayloadReaderFactory,DefaultTsPayloadReaderFactory.Flags,DeferredMediaPeriod,DeferredMediaPeriod.PrepareErrorListener,Descriptor,DolbyVisionConfig,Download,Download.FailureReason,Download.State,DownloadCursor,Downloader,Downloader.ProgressListener,DownloaderConstructorHelper,DownloaderFactory,DownloadException,DownloadHelper,DownloadHelper.Callback,DownloadIndex,DownloadManager,DownloadManager.Listener,DownloadNotificationHelper,DownloadNotificationUtil,DownloadProgress, DownloadRequest,DownloadRequest.UnsupportedRequestException,DownloadService,DrmInitData,DrmInitData.SchemeData,DrmSession,DrmSession.DrmSessionException,DrmSession.State,DrmSessionManager,DtsReader,DtsUtil,DummyDataSource,DummyExtractorOutput,DummySurface,DummyTrackOutput,DvbDecoder,DvbSubtitleReader,DynamicConcatenatingMediaSource,EbmlProcessor,EbmlProcessor.ElementType,EGLSurfaceTexture,EGLSurfaceTexture.GlException,EGLSurfaceTexture.SecureMode,EGLSurfaceTexture.TextureImageListener,ElementaryStreamReader,EmptySampleStream,ErrorMessageProvider,ErrorStateDrmSession,EventDispatcher,EventDispatcher.Event,EventLogger,EventMessage,EventMessageDecoder,EventMessageEncoder,EventStream,ExoDatabaseProvider,ExoMediaCrypto,ExoMediaDrm,ExoMediaDrm.KeyRequest, ExoMediaDrm.KeyStatus,ExoMediaDrm.OnEventListener,ExoMediaDrm.OnKeyStatusChangeListener,ExoMediaDrm.ProvisionRequest,ExoPlaybackException,ExoPlaybackException.Type,ExoPlayer,ExoPlayer.ExoPlayerComponent,ExoPlayer.ExoPlayerMessage,ExoPlayerFactory,ExoPlayerLibraryInfo,Extractor,Extractor.ReadResult,ExtractorInput,ExtractorMediaSource,ExtractorMediaSource.EventListener,ExtractorMediaSource.Factory,ExtractorOutput,ExtractorsFactory,FfmpegAudioRenderer,FfmpegDecoderException,FfmpegLibrary,FileDataSource, FileDataSource.FileDataSourceException,FileDataSourceFactory,FilterableManifest,FilteringHlsPlaylistParserFactory,FilteringManifestParser,FixedTrackSelection,FixedTrackSelection.Factory,FlacDecoderException,FlacExtractor,FlacExtractor.Flags,FlacLibrary, FlacStreamMetadata,FlvExtractor,Format,FormatHolder,ForwardingTimeline,FragmentedMp4Extractor,FragmentedMp4Extractor.Flags,FrameRotationQueue,FrameworkMediaCrypto,FrameworkMediaDrm,GaplessInfoHolder,GeobFrame,GlUtil,GlViewGroup,GvrAudioProcessor,GvrPlayerActivity,H262Reader,H264Reader,H265Reader,HandlerWrapper,HevcConfig,HlsDataSourceFactory,HlsDownloader,HlsExtractorFactory,HlsExtractorFactory.Result,HlsManifest,HlsMasterPlaylist,HlsMasterPlaylist.Rendition,HlsMasterPlaylist.Variant,HlsMediaPeriod,HlsMediaPlaylist,HlsMediaPlaylist.PlaylistType,HlsMediaPlaylist.Segment,HlsMediaSource,HlsMediaSource.Factory,HlsPlaylist,HlsPlaylistParser,HlsPlaylistParserFactory,HlsPlaylistTracker,HlsPlaylistTracker.Factory,HlsPlaylistTracker.PlaylistEventListener,HlsPlaylistTracker.PlaylistResetException,HlsPlaylistTracker.PlaylistStuckException,HlsPlaylistTracker.PrimaryPlaylistListener, HlsTrackMetadataEntry,HlsTrackMetadataEntry.VariantInfo,HttpDataSource,HttpDataSource.BaseFactory,HttpDataSource.Factory,HttpDataSource.HttpDataSourceException,HttpDataSource.HttpDataSourceException.Type,HttpDataSource.InvalidContentTypeException,HttpDataSource.InvalidResponseCodeException,HttpDataSource.RequestProperties,HttpMediaDrmCallback,IcyDecoder,IcyHeaders,IcyInfo,Id3Decoder,Id3Decoder.FramePredicate,Id3Frame,Id3Peeker,Id3Reader,IllegalSeekPositionException,ImaAdsLoader,ImaAdsLoader.Builder,InitializationChunk,InternalFrame,JobDispatcherScheduler,JobDispatcherScheduler.JobDispatcherSchedulerService,KeysExpiredException,LatmReader,LeanbackPlayerAdapter,LeastRecentlyUsedCacheEvictor,LibflacAudioRenderer,LibopusAudioRenderer,LibraryLoader,LibvpxVideoRenderer,LoadControl,Loader,Loader.Callback,Loader.Loadable,Loader.LoadErrorAction,Loader.ReleaseCallback,Loader.UnexpectedLoaderException,LoaderErrorThrower,LoaderErrorThrower.Dummy,LoadErrorHandlingPolicy,LocalMediaDrmCallback,Log,LongArray,LoopingMediaSource,MappingTrackSelector,MappingTrackSelector.MappedTrackInfo,MatroskaExtractor,MatroskaExtractor.Flags,MdtaMetadataEntry,MediaChunk,MediaChunkIterator,MediaChunkListIterator,MediaClock,MediaCodecAudioRenderer,MediaCodecInfo,MediaCodecRenderer, MediaCodecRenderer.DecoderInitializationException,MediaCodecRenderer.KeepCodecResult,MediaCodecSelector,MediaCodecUtil,MediaCodecUtil.DecoderQueryException,MediaCodecVideoRenderer,MediaCodecVideoRenderer.CodecMaxValues,MediaDrmCallback,MediaFormatUtil,MediaItem,MediaItem.Builder,MediaItem.DrmScheme,MediaItem.UriBundle,MediaItemQueue,MediaPeriod,MediaPeriod.Callback,MediaSessionConnector,MediaSessionConnector.CommandReceiver,MediaSessionConnector.CustomActionProvider,MediaSessionConnector.DefaultMediaMetadataProvider,MediaSessionConnector.MediaButtonEventHandler,MediaSessionConnector.MediaMetadataProvider,MediaSessionConnector.PlaybackActions,MediaSessionConnector.PlaybackPreparer,MediaSessionConnector.QueueEditor,MediaSessionConnector.QueueNavigator,MediaSessionConnector.RatingCallback,MediaSource,MediaSource.MediaPeriodId,MediaSource.SourceInfoRefreshListener,MediaSourceEventListener,MediaSourceEventListener.EventDispatcher,MediaSourceEventListener.LoadEventInfo,MediaSourceEventListener.MediaLoadData,MergingMediaSource,MergingMediaSource.IllegalMergeException,MergingMediaSource.IllegalMergeException.Reason,Metadata,Metadata.Entry,MetadataDecoder,MetadataDecoderFactory,MetadataInputBuffer,MetadataOutput,MetadataRenderer,MetadataRenderer.Output, MimeTypes,MlltFrame,Mp3Extractor,Mp3Extractor.Flags,Mp4Extractor,Mp4Extractor.Flags,Mp4WebvttDecoder,MpegAudioHeader,MpegAudioReader,NalUnitUtil,NalUnitUtil.PpsData,NalUnitUtil.SpsData,NoOpCacheEvictor,NoSampleRenderer,NotificationUtil,NotificationUtil.Importance,OfflineLicenseHelper,OggExtractor,OkHttpDataSource,OkHttpDataSourceFactory,OpusDecoderException,OpusLibrary,OutputBuffer,ParsableBitArray,ParsableByteArray,ParsableNalUnitBitArray,ParserException,ParsingLoadable,ParsingLoadable.Parser,Period, PesReader,PgsDecoder,PictureFrame,PlatformScheduler,PlatformScheduler.PlatformSchedulerService,PlaybackControlView,PlaybackControlView.ControlDispatcher,PlaybackParameters,PlaybackPreparer,Player,Player.AudioComponent,Player.DefaultEventListener,Player.DiscontinuityReason,Player.EventListener,Player.MetadataComponent,Player.RepeatMode,Player.TextComponent,Player.TimelineChangeReason,Player.VideoComponent,PlayerControlView,PlayerControlView.ProgressUpdateListener,PlayerControlView.VisibilityListener,PlayerEmsgHandler,PlayerEmsgHandler.PlayerEmsgCallback,PlayerMessage,PlayerMessage.Sender,PlayerMessage.Target,PlayerNotificationManager,PlayerNotificationManager.CustomActionReceiver,PlayerNotificationManager.MediaDescriptionAdapter,PlayerNotificationManager.NotificationListener,PlayerNotificationManager.Priority,PlayerNotificationManager.Visibility,PlayerView,PlayerView.ShowBuffering,PointerRenderer,PositionHolder,Predicate,PriorityDataSource,PriorityDataSourceFactory,PriorityTaskManager,PriorityTaskManager.PriorityTooLowException,PrivateCommand,PrivFrame,ProgramInformation,ProgressiveDownloader,ProgressiveMediaSource,ProgressiveMediaSource.Factory,Projection,Projection.DrawMode,Projection.Mesh,Projection.SubMesh,ProjectionDecoder,PsExtractor,PsshAtomUtil, RandomTrackSelection,RandomTrackSelection.Factory,RangedUri,RawCcExtractor,RawResourceDataSource,RawResourceDataSource.RawResourceDataSourceException,Renderer,Renderer.State,RendererCapabilities,RendererConfiguration,RenderersFactory,RepeatModeActionProvider, RepeatModeUtil,RepeatModeUtil.RepeatToggleModes,Representation,Representation.MultiSegmentRepresentation,Representation.SingleSegmentRepresentation,Requirements,Requirements.RequirementFlags,RequirementsWatcher,RequirementsWatcher.Listener,ResolvingDataSource,ResolvingDataSource.Factory,ResolvingDataSource.Resolver,ReusableBufferedOutputStream,RtmpDataSource,RtmpDataSourceFactory, SampleQueue,SampleQueue.UpstreamFormatChangedListener,SampleQueueMappingException,SampleStream,SceneRenderer,Scheduler,SectionPayloadReader,SectionReader,SeekMap,SeekMap.SeekPoints,SeekMap.Unseekable,SeekParameters,SeekPoint,SegmentBase,SegmentBase.MultiSegmentBase,SegmentBase.SegmentList,SegmentBase.SegmentTemplate,SegmentBase.SegmentTimelineElement,SegmentBase.SingleSegmentBase, SegmentDownloader,SegmentDownloader.Segment,SequenceableLoader,SequenceableLoader.Callback,SessionAvailabilityListener,ShuffleOrder,ShuffleOrder.DefaultShuffleOrder,ShuffleOrder.UnshuffledShuffleOrder,SilenceMediaSource,SilenceSkippingAudioProcessor,SimpleCache,SimpleDecoder,SimpleDecoderAudioRenderer,SimpleExoPlayer,SimpleExoPlayer.VideoListener,SimpleExoPlayerView,SimpleOutputBuffer,SimpleSubtitleDecoder,SinglePeriodAdTimeline,SinglePeriodTimeline,SingleSampleMediaChunk,SingleSampleMediaSource,SingleSampleMediaSource.EventListener,SingleSampleMediaSource.Factory,SingleTapListener,SlidingPercentile,SonicAudioProcessor,SphericalSurfaceView,SpliceCommand,SpliceInfoDecoder,SpliceInfoSectionReader,SpliceInsertCommand,SpliceInsertCommand.ComponentSplice, SpliceNullCommand,SpliceScheduleCommand,SpliceScheduleCommand.ComponentSplice,SpliceScheduleCommand.Event,SsaDecoder,SsChunkSource, SsChunkSource.Factory,SsDownloader,SsManifest,SsManifest.ProtectionElement,SsManifest.StreamElement,SsManifestParser,SsManifestParser.MissingFieldException,SsMediaSource,SsMediaSource.Factory,SsUtil,StandaloneMediaClock,StatsDataSource,StreamKey,SubripDecoder, Subtitle,SubtitleDecoder,SubtitleDecoderException,SubtitleDecoderFactory,SubtitleInputBuffer,SubtitleOutputBuffer,SubtitleView, TeeAudioProcessor,TeeAudioProcessor.AudioBufferSink,TeeAudioProcessor.WavFileAudioBufferSink,TeeDataSource,TextInformationFrame, TextOutput,TextRenderer,TextRenderer.Output,TimeBar,TimeBar.OnScrubListener,TimedValueQueue,Timeline,Timeline.Period,Timeline.Window,TimelineQueueEditor,TimelineQueueEditor.MediaIdEqualityChecker,TimelineQueueEditor.MediaSourceFactory,TimelineQueueEditor.QueueDataAdapter,TimelineQueueNavigator,TimeSignalCommand,TimestampAdjuster,TimestampAdjusterProvider,TraceUtil,Track,Track.Transformation,TrackBitrateEstimator,TrackEncryptionBox,TrackGroup,TrackGroupArray,TrackNameProvider,TrackOutput,TrackOutput.CryptoData,TrackSelection,TrackSelection.Definition,TrackSelection.Factory,TrackSelectionArray,TrackSelectionDialogBuilder,TrackSelectionDialogBuilder.DialogCallback,TrackSelectionParameters,TrackSelectionParameters.Builder,TrackSelectionUtil,TrackSelectionUtil.AdaptiveTrackSelectionFactory,TrackSelectionView,TrackSelectionView.TrackSelectionListener,TrackSelector,TrackSelector.InvalidationListener, TrackSelectorResult,TransferListener,TsExtractor,TsExtractor.Mode,TsPayloadReader,TsPayloadReader.DvbSubtitleInfo,TsPayloadReader.EsInfo,TsPayloadReader.Factory,TsPayloadReader.Flags,TsPayloadReader.TrackIdGenerator,TsUtil,TtmlDecoder,Tx3gDecoder,UdpDataSource,UdpDataSource.UdpDataSourceException,UnrecognizedInputFormatException,UnsupportedDrmException,UnsupportedDrmException.Reason, UriUtil,UrlLinkFrame,UrlTemplate,UtcTimingElement,Util,VersionTable,VideoFrameMetadataListener,VideoFrameReleaseTimeHelper,VideoListener,VideoRendererEventListener,VideoRendererEventListener.EventDispatcher,VorbisComment,VpxDecoderException,VpxLibrary,VpxOutputBuffer, VpxOutputBufferRenderer,VpxVideoSurfaceView,WavExtractor,WavUtil,WebvttCssStyle,WebvttCssStyle.FontSizeUnit,WebvttCssStyle.StyleFlags,WebvttCue,WebvttCue.Builder,WebvttCueParser,WebvttDecoder,WebvttExtractor,WebvttParserUtil,WidevineUtil,WindowedTrackBitrateEstimator,WorkManagerScheduler,WorkManagerScheduler.SchedulerWorker,WritableDownloadIndex,XmlPullParserUtil","title":"Exoplayer classes"},{"location":"tab_blogs/android/world_of_videos/","text":"Exoplayer # 17/9/19 A good video player library for implementing A decent video player in your app, coz the other option of video_view from the default android sdk is less useful Steps to implement # Add Exoplayer library : Which is actually a group of 6-7 individual libraries having a jillion files. implementation 'com.google.android.exoplayer:exoplayer:2.10.4' adding this would add fucking 800 classes of this massive library. So let us see what it has to offer. Some basic Details. The library has the following modules. Adding a dependency to the full ExoPlayer library is equivalent to adding dependencies on all of the library modules individually: exoplayer-core: Core functionality (required). exoplayer-dash: Support for DASH content. exoplayer-hls: Support for HLS content. exoplayer-smoothstreaming: Support for SmoothStreaming content. exoplayer-ui: UI components and resources for use with ExoPlayer. In addition to library modules, ExoPlayer has multiple extension modules that depend on external libraries to provide additional functionality. Browse the extensions directory(https://github.com/google/ExoPlayer/tree/release-v2/extensions/) and their individual READMEs for details. Also java 8 support is compulsory for this library. the Bare Minimmums. # The smallest code that we need to protected void onCreate(Bundle savedInstanceState) { ... Context ctx =this; String CONTENT_URL = \"https://www.radiantmediaplayer.com/media/bbb-360p.mp4\"; int playerID=R.id.pv_main; int appNameStringRes = R.string.app_name; startPlayingVideo(this,CONTENT_URL,playerID,appNameStringRes); } // private void startPlayingVideo(Context ctx , String CONTENT_URL, int playerID, String appNameRes) { PlayerView pvMain = ctx.findViewById(playerID); //BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(); //TrackSelection.Factory videoTrackSelectionFactory = new AdaptiveTrackSelection.Factory(bandwidthMeter); //TrackSelector trackSelectorDef = new DefaultTrackSelector(videoTrackSelectionFactory); TrackSelector trackSelectorDef = new DefaultTrackSelector(); SimpleExoPlayer absPlayerInternal = ExoPlayerFactory.newSimpleInstance(ctx, trackSelectorDef); String userAgent = Util.getUserAgent(ctx, ctx.getString(appNameRes)); DefaultDataSourceFactory defdataSourceFactory = new DefaultDataSourceFactory(ctx,userAgent); Uri uriOfContentUrl = Uri.parse(CONTENT_URL); MediaSource mediaSource = new ProgressiveMediaSource.Factory(defdataSourceFactory).createMediaSource(uriOfContentUrl); absPlayerInternal.prepare(mediaSource); absPlayerInternal.setPlayWhenReady(true); pvMain.setPlayer(absPlayerInternal); } private void stopPlayer(PlayerView pv,SimpleExoPlayer absPlayer){ pv.setPlayer(null); absPlayer.release(); absPlayer = null; } How this works? - We add a PlayerView widget in our xml and refer its instance in java. - Then we attach an instance of SimpleExoPlayer to it , which will handle all downloading, decoding and rendering of video. In More Details, but with a tiny off topic context: Suppose I am the creator of baby shark video song. I have made this large 48 mb sized HD, bluray video and uploaded it to my fast, responsive,hypothetical aws server. I want the an app which is able to fetch this video into user's mobile without downloading it on their mobiles. This is what I call static streaming . The video player is supposed to download some small chunks(Say, 2-12 second of a video at a time) of video one by one, at real time and show it to the users on the spot. But The biggest problem with streaming is connectivity. Their are mobile users with super fast internet speeds, users with fluctuating speeds and users with terribly ugly internet speeds. Even though a 6 sec HD video would be just 700-800 KB data, it might take 4-5 seconds for a user with poor connection. So exo player has this TrackSelector class, that is responsible for choosing which file chunks to download based on perceived bandwidth changes. So, for eg, if a high quality chunk would take too long to download, the TrackSelector will choose something of lower quality to show the user. And since each chunk is usually about 2 to 12 seconds long, it\u2019s not bad if the user gets a lower quality chunk of media once in while for the benefit of a smooth experience. It Uses BandwidthMeter class to get user's current bandwidth speeds and a bunch of other classes nd factories to create different tracks of video stream chuncks or packets of different sizes and qualities. (Later we will expand more on this: what are tracks, how tracks are created, track selection and creators, How it interacts with absPlayerInstance etc ) So, to summarise, TrackSelector basically makes a setting in our exoplayer environment to download either high quality HD packets(i.e a complete packet) or low quality 144p or 360p packets(or optimised/compressed/low quality version of a packet) from a stream usually on the basis of user's Internet Connection Bandwidth and/or other factors Using this track selector we can create an almost ready to run ExoPlayer instance. Let's look into SimpleExoPlayer . At the core of the ExoPlayer library is the Player interface. This is the most powerful interface as it has definations for functions like: isPlayingAd() : weather the player is playing an ad or not. getCurrentAdGroupIndex() : index of current ad group(if ad is being played) getCurrentAdIndexInAdGroup() : index of current ad in current ad group(if ad is being played) getContentDuration() : returns either the total duration of contents(+ the ads) or C.TIME_UNSET (a constant indicating remaining time is unknown) getContentPosition() : position of content from where it will be resumed playing after ads are finished. (if ads aren't playing, will simply return same as getPosition() ) - getContentBufferedPosition() : returns an estimate of the content position in the current content window up to which data is buffered, in milliseconds.(if ads aren't playing, will simply return same as getBufferedPosition() ) get/setVolume() getAudioComponent(),getVideoComponent(),MetaDataComponent() // not exactly what you are thinking add/remove audio/videoListener addEventListener(),addErrorListener setPlayWhenRead()/ setRepeatMode()/ seekTo()/ stop()/reset()/ isLoading()/release() getCurrentTrackGroups/getTrackSelections()/geTCurrentManifest() setPlayBackParams() //like speed/pith Instances can be created through ExoPlayerFactory class. SimpleExoPlayer instance is a class which implements Player functions. ExoPlayer exposes traditional high-level media player functionality such as getAudioFormat, getCurrentPositon, getDuration, setVolume, seekTo, setPlayWhenReady, stop and much more. Just like I have mentioned before ExoPlayer uses many components to achieve its modularity and customizability. It delegates work to components which have to be injected when we create and prepare an ExoPlayer instance. The next part is specifying a MediaSource . We have assumed that their will be a video on some server that will be continuously sending us data some large chunks of data packages and our track selector and other libs will download small chuncks of it based on user bandwidth. But there is something missing, something incomplete. How is this continuous stream coming?Where is it coming from? why is it coming automatically and continuously?When and how did it started coming? How is it forever running?Why isn't data getting wasted if packet downloading speed is so fast while streaming speed is slow?Can I listen to the packets being received/decoded/...(whatever are the stages before player starts to render it and user sees it)...? These are good questions that will be obviously answered. But let's first work on our assumptions. 1. Our first assumption is very correct: There IS some server that has our video loaded in it. So our first task would be to inform our app's video handling environment, i.e the exoplayer about it A {@link Factory} that produces {@link DefaultDataSource} instances that delegate to * {@link DefaultHttpDataSource}s for non-file/asset/content URIs. Your choice of MediaSource is going to depend on the type of media you're trying to play. In this example, we're going to be playing an MP4, so we're going to use an ProgressiveMediaSource which supports formats like MP4, MP3, Matroska, and so on. If you wanted to play Dash or HLS or smooth streaming streams, then you would use the corresponding MediaSources for those different formats. Extras # Why exoplayer does not support progress listener: https://github.com/google/ExoPlayer/issues/2090 logically it's the client that knows the points at which it wants a position update What if the client just wants to listen to the video current position updates? Constantly checking getCurrentPosition (e.g. with the help of Timer().scheduleAtFixedRate) is a very inefficient solution. IMHO, it would be great if ExoPlayer had a specialized method for this, somethings like setCurrentPositionListener which the developers could use to get notified about the video position changes. Since the player manages its own getCurrentPosition property it already knows when to emit onPositionChanged events. The client can only use the polling technique for this. /** // TrackSelector class * The component of an {@link ExoPlayer} responsible for selecting tracks to be consumed by each of * the player's {@link Renderer}s. The {@link DefaultTrackSelector} implementation should be * suitable for most use cases. * * <h3>Interactions with the player</h3> * * The following interactions occur between the player and its track selector during playback. * * <p> * * <ul> * <li>When the player is created it will initialize the track selector by calling {@link * #init(InvalidationListener, BandwidthMeter)}. * <li>When the player needs to make a track selection it will call {@link * #selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)}. This * typically occurs at the start of playback, when the player starts to buffer a new period of * the media being played, and when the track selector invalidates its previous selections. * <li>The player may perform a track selection well in advance of the selected tracks becoming * active, where active is defined to mean that the renderers are actually consuming media * corresponding to the selection that was made. For example when playing media containing * multiple periods, the track selection for a period is made when the player starts to buffer * that period. Hence if the player's buffering policy is to maintain a 30 second buffer, the * selection will occur approximately 30 seconds in advance of it becoming active. In fact the * selection may never become active, for example if the user seeks to some other period of * the media during the 30 second gap. The player indicates to the track selector when a * selection it has previously made becomes active by calling {@link * #onSelectionActivated(Object)}. * <li>If the track selector wishes to indicate to the player that selections it has previously * made are invalid, it can do so by calling {@link * InvalidationListener#onTrackSelectionsInvalidated()} on the {@link InvalidationListener} * that was passed to {@link #init(InvalidationListener, BandwidthMeter)}. A track selector * may wish to do this if its configuration has changed, for example if it now wishes to * prefer audio tracks in a particular language. This will trigger the player to make new * track selections. Note that the player will have to re-buffer in the case that the new * track selection for the currently playing period differs from the one that was invalidated. * </ul> * * <h3>Renderer configuration</h3> * * The {@link TrackSelectorResult} returned by {@link #selectTracks(RendererCapabilities[], * TrackGroupArray, MediaPeriodId, Timeline)} contains not only {@link TrackSelection}s for each * renderer, but also {@link RendererConfiguration}s defining configuration parameters that the * renderers should apply when consuming the corresponding media. Whilst it may seem counter- * intuitive for a track selector to also specify renderer configuration information, in practice * the two are tightly bound together. It may only be possible to play a certain combination tracks * if the renderers are configured in a particular way. Equally, it may only be possible to * configure renderers in a particular way if certain tracks are selected. Hence it makes sense to * determined the track selection and corresponding renderer configurations in a single step. * * <h3>Threading model</h3> * * All calls made by the player into the track selector are on the player's internal playback * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()} * from any thread. */ public abstract class TrackSelector { } ProgressiveMediaSource(a class) extends BaseMediaSource(a class) extends Media Source(an interface) /** * Provides one period that loads data from a {@link Uri} and extracted using an {@link Extractor}. * * <p>If the possible input stream container formats are known, pass a factory that instantiates * extractors for them to the constructor. Otherwise, pass a {@link DefaultExtractorsFactory} to use * the default extractors. When reading a new stream, the first {@link Extractor} in the array of * extractors created by the factory that returns {@code true} from {@link Extractor#sniff} will be * used to extract samples from the input stream. * * <p>Note that the built-in extractor for FLV streams does not support seeking. */ public final class ProgressiveMediaSource extends BaseMediaSource implements ProgressiveMediaPeriod.Listener { /* Factory for creating instances of ProgressiveMediaSource class, using the extractors provided by {DefaultExtractorsFactory} (OR something else too, idk). */ public static final class Factory implements AdsMediaSource.MediaSourceFactory { ... ... public Factory(DataSource.Factory dataSourceFactory) { this(dataSourceFactory, new DefaultExtractorsFactory()); } .... } /** * Base {@link MediaSource} implementation to handle parallel reuse and to keep a list of {@link * MediaSourceEventListener}s. * * <p>Whenever an implementing subclass needs to provide a new timeline and/or manifest, it must * call {@link #refreshSourceInfo(Timeline, Object)} to notify all listeners. */ public abstract class BaseMediaSource implements MediaSource { private final ArrayList<SourceInfoRefreshListener> sourceInfoListeners; private final MediaSourceEventListener.EventDispatcher eventDispatcher; @Nullable private Looper looper; @Nullable private Timeline timeline; @Nullable private Object manifest; public BaseMediaSource() { sourceInfoListeners = new ArrayList<>(/* initialCapacity= */ 1); eventDispatcher = new MediaSourceEventListener.EventDispatcher(); } /** * Defines and provides media to be played by an {@link com.google.android.exoplayer2.ExoPlayer}. A * MediaSource has two main responsibilities: * * <ul> * <li>To provide the player with a {@link Timeline} defining the structure of its media, and to * provide a new timeline whenever the structure of the media changes. The MediaSource * provides these timelines by calling {@link SourceInfoRefreshListener#onSourceInfoRefreshed} * on the {@link SourceInfoRefreshListener}s passed to {@link * #prepareSource(SourceInfoRefreshListener, TransferListener)}. * <li>To provide {@link MediaPeriod} instances for the periods in its timeline. MediaPeriods are * obtained by calling {@link #createPeriod(MediaPeriodId, Allocator, long)}, and provide a * way for the player to load and read the media. * </ul> * * All methods are called on the player's internal playback thread, as described in the {@link * com.google.android.exoplayer2.ExoPlayer} Javadoc. They should not be called directly from * application code. Instances can be re-used, but only for one {@link * com.google.android.exoplayer2.ExoPlayer} instance simultaneously. */ public interface MediaSource { /** Listener for source events. */ interface SourceInfoRefreshListener { /** ... } exo resources : # https://android.jlelse.eu/streaming-video-on-android-using-exoplayer-3087d604095 This guy implements basic streaming but has some content that i haven't yet read. https://medium.com/@pawankgupta.se/live-video-streaming-using-exoplayer-2-x-41cc7f9301d6 basic video rendering using HLS http://www.tothenew.com/blog/playing-different-videos-with-exo-player-in-android-tv/ basic exoplayer. might have something new. https://blog.hotstar.com/when-hotstar-met-exoplayer-5b9ea500bd0 : good theory regarding exo https://github.com/Tubitv/TubiPlayer : tubi player : a player build around exoplayer non exo player resources # Good article on how video straming woks : 1. https://www.swipetips.com/android-video-streaming-videoview-tutorial/ video view streaming 1. https://instagram-engineering.com/improving-video-playback-on-android-2f6c6a0058d 2. https://medium.com/@onix_systems/rtmp-protocol-enable-instant-video-streaming-for-android-apps-44cd9de6f339 3. http://www.tothenew.com/blog/adaptive-video-streaming-hls/ very good theory 3. https://medium.com/p/cddc0b1bf764/responses/show (bad , promotional content, but good theory) 4. https://medium.com/@judeosby/creating-a-video-streaming-app-in-android-using-mvvm-rxjava-pagination-library-and-the-normal-e7b120653d19 (good, practical one with github/open source use cases uses deprecated bvp player : https://github.com/halilozercan/BetterVideoPlayer) https://www.streamingmedia.com/Default.aspx website on streaming. https://imagen.io/resources/what-are-svod-tvod-avod/ : VOD business jw player : they have implemented everything we want.","title":"Exoplayer"},{"location":"tab_blogs/android/world_of_videos/#exoplayer","text":"17/9/19 A good video player library for implementing A decent video player in your app, coz the other option of video_view from the default android sdk is less useful","title":"Exoplayer"},{"location":"tab_blogs/android/world_of_videos/#steps-to-implement","text":"Add Exoplayer library : Which is actually a group of 6-7 individual libraries having a jillion files. implementation 'com.google.android.exoplayer:exoplayer:2.10.4' adding this would add fucking 800 classes of this massive library. So let us see what it has to offer. Some basic Details. The library has the following modules. Adding a dependency to the full ExoPlayer library is equivalent to adding dependencies on all of the library modules individually: exoplayer-core: Core functionality (required). exoplayer-dash: Support for DASH content. exoplayer-hls: Support for HLS content. exoplayer-smoothstreaming: Support for SmoothStreaming content. exoplayer-ui: UI components and resources for use with ExoPlayer. In addition to library modules, ExoPlayer has multiple extension modules that depend on external libraries to provide additional functionality. Browse the extensions directory(https://github.com/google/ExoPlayer/tree/release-v2/extensions/) and their individual READMEs for details. Also java 8 support is compulsory for this library.","title":"Steps to implement"},{"location":"tab_blogs/android/world_of_videos/#the-bare-minimmums","text":"The smallest code that we need to protected void onCreate(Bundle savedInstanceState) { ... Context ctx =this; String CONTENT_URL = \"https://www.radiantmediaplayer.com/media/bbb-360p.mp4\"; int playerID=R.id.pv_main; int appNameStringRes = R.string.app_name; startPlayingVideo(this,CONTENT_URL,playerID,appNameStringRes); } // private void startPlayingVideo(Context ctx , String CONTENT_URL, int playerID, String appNameRes) { PlayerView pvMain = ctx.findViewById(playerID); //BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(); //TrackSelection.Factory videoTrackSelectionFactory = new AdaptiveTrackSelection.Factory(bandwidthMeter); //TrackSelector trackSelectorDef = new DefaultTrackSelector(videoTrackSelectionFactory); TrackSelector trackSelectorDef = new DefaultTrackSelector(); SimpleExoPlayer absPlayerInternal = ExoPlayerFactory.newSimpleInstance(ctx, trackSelectorDef); String userAgent = Util.getUserAgent(ctx, ctx.getString(appNameRes)); DefaultDataSourceFactory defdataSourceFactory = new DefaultDataSourceFactory(ctx,userAgent); Uri uriOfContentUrl = Uri.parse(CONTENT_URL); MediaSource mediaSource = new ProgressiveMediaSource.Factory(defdataSourceFactory).createMediaSource(uriOfContentUrl); absPlayerInternal.prepare(mediaSource); absPlayerInternal.setPlayWhenReady(true); pvMain.setPlayer(absPlayerInternal); } private void stopPlayer(PlayerView pv,SimpleExoPlayer absPlayer){ pv.setPlayer(null); absPlayer.release(); absPlayer = null; } How this works? - We add a PlayerView widget in our xml and refer its instance in java. - Then we attach an instance of SimpleExoPlayer to it , which will handle all downloading, decoding and rendering of video. In More Details, but with a tiny off topic context: Suppose I am the creator of baby shark video song. I have made this large 48 mb sized HD, bluray video and uploaded it to my fast, responsive,hypothetical aws server. I want the an app which is able to fetch this video into user's mobile without downloading it on their mobiles. This is what I call static streaming . The video player is supposed to download some small chunks(Say, 2-12 second of a video at a time) of video one by one, at real time and show it to the users on the spot. But The biggest problem with streaming is connectivity. Their are mobile users with super fast internet speeds, users with fluctuating speeds and users with terribly ugly internet speeds. Even though a 6 sec HD video would be just 700-800 KB data, it might take 4-5 seconds for a user with poor connection. So exo player has this TrackSelector class, that is responsible for choosing which file chunks to download based on perceived bandwidth changes. So, for eg, if a high quality chunk would take too long to download, the TrackSelector will choose something of lower quality to show the user. And since each chunk is usually about 2 to 12 seconds long, it\u2019s not bad if the user gets a lower quality chunk of media once in while for the benefit of a smooth experience. It Uses BandwidthMeter class to get user's current bandwidth speeds and a bunch of other classes nd factories to create different tracks of video stream chuncks or packets of different sizes and qualities. (Later we will expand more on this: what are tracks, how tracks are created, track selection and creators, How it interacts with absPlayerInstance etc ) So, to summarise, TrackSelector basically makes a setting in our exoplayer environment to download either high quality HD packets(i.e a complete packet) or low quality 144p or 360p packets(or optimised/compressed/low quality version of a packet) from a stream usually on the basis of user's Internet Connection Bandwidth and/or other factors Using this track selector we can create an almost ready to run ExoPlayer instance. Let's look into SimpleExoPlayer . At the core of the ExoPlayer library is the Player interface. This is the most powerful interface as it has definations for functions like: isPlayingAd() : weather the player is playing an ad or not. getCurrentAdGroupIndex() : index of current ad group(if ad is being played) getCurrentAdIndexInAdGroup() : index of current ad in current ad group(if ad is being played) getContentDuration() : returns either the total duration of contents(+ the ads) or C.TIME_UNSET (a constant indicating remaining time is unknown) getContentPosition() : position of content from where it will be resumed playing after ads are finished. (if ads aren't playing, will simply return same as getPosition() ) - getContentBufferedPosition() : returns an estimate of the content position in the current content window up to which data is buffered, in milliseconds.(if ads aren't playing, will simply return same as getBufferedPosition() ) get/setVolume() getAudioComponent(),getVideoComponent(),MetaDataComponent() // not exactly what you are thinking add/remove audio/videoListener addEventListener(),addErrorListener setPlayWhenRead()/ setRepeatMode()/ seekTo()/ stop()/reset()/ isLoading()/release() getCurrentTrackGroups/getTrackSelections()/geTCurrentManifest() setPlayBackParams() //like speed/pith Instances can be created through ExoPlayerFactory class. SimpleExoPlayer instance is a class which implements Player functions. ExoPlayer exposes traditional high-level media player functionality such as getAudioFormat, getCurrentPositon, getDuration, setVolume, seekTo, setPlayWhenReady, stop and much more. Just like I have mentioned before ExoPlayer uses many components to achieve its modularity and customizability. It delegates work to components which have to be injected when we create and prepare an ExoPlayer instance. The next part is specifying a MediaSource . We have assumed that their will be a video on some server that will be continuously sending us data some large chunks of data packages and our track selector and other libs will download small chuncks of it based on user bandwidth. But there is something missing, something incomplete. How is this continuous stream coming?Where is it coming from? why is it coming automatically and continuously?When and how did it started coming? How is it forever running?Why isn't data getting wasted if packet downloading speed is so fast while streaming speed is slow?Can I listen to the packets being received/decoded/...(whatever are the stages before player starts to render it and user sees it)...? These are good questions that will be obviously answered. But let's first work on our assumptions. 1. Our first assumption is very correct: There IS some server that has our video loaded in it. So our first task would be to inform our app's video handling environment, i.e the exoplayer about it A {@link Factory} that produces {@link DefaultDataSource} instances that delegate to * {@link DefaultHttpDataSource}s for non-file/asset/content URIs. Your choice of MediaSource is going to depend on the type of media you're trying to play. In this example, we're going to be playing an MP4, so we're going to use an ProgressiveMediaSource which supports formats like MP4, MP3, Matroska, and so on. If you wanted to play Dash or HLS or smooth streaming streams, then you would use the corresponding MediaSources for those different formats.","title":"the Bare Minimmums."},{"location":"tab_blogs/android/world_of_videos/#extras","text":"Why exoplayer does not support progress listener: https://github.com/google/ExoPlayer/issues/2090 logically it's the client that knows the points at which it wants a position update What if the client just wants to listen to the video current position updates? Constantly checking getCurrentPosition (e.g. with the help of Timer().scheduleAtFixedRate) is a very inefficient solution. IMHO, it would be great if ExoPlayer had a specialized method for this, somethings like setCurrentPositionListener which the developers could use to get notified about the video position changes. Since the player manages its own getCurrentPosition property it already knows when to emit onPositionChanged events. The client can only use the polling technique for this. /** // TrackSelector class * The component of an {@link ExoPlayer} responsible for selecting tracks to be consumed by each of * the player's {@link Renderer}s. The {@link DefaultTrackSelector} implementation should be * suitable for most use cases. * * <h3>Interactions with the player</h3> * * The following interactions occur between the player and its track selector during playback. * * <p> * * <ul> * <li>When the player is created it will initialize the track selector by calling {@link * #init(InvalidationListener, BandwidthMeter)}. * <li>When the player needs to make a track selection it will call {@link * #selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)}. This * typically occurs at the start of playback, when the player starts to buffer a new period of * the media being played, and when the track selector invalidates its previous selections. * <li>The player may perform a track selection well in advance of the selected tracks becoming * active, where active is defined to mean that the renderers are actually consuming media * corresponding to the selection that was made. For example when playing media containing * multiple periods, the track selection for a period is made when the player starts to buffer * that period. Hence if the player's buffering policy is to maintain a 30 second buffer, the * selection will occur approximately 30 seconds in advance of it becoming active. In fact the * selection may never become active, for example if the user seeks to some other period of * the media during the 30 second gap. The player indicates to the track selector when a * selection it has previously made becomes active by calling {@link * #onSelectionActivated(Object)}. * <li>If the track selector wishes to indicate to the player that selections it has previously * made are invalid, it can do so by calling {@link * InvalidationListener#onTrackSelectionsInvalidated()} on the {@link InvalidationListener} * that was passed to {@link #init(InvalidationListener, BandwidthMeter)}. A track selector * may wish to do this if its configuration has changed, for example if it now wishes to * prefer audio tracks in a particular language. This will trigger the player to make new * track selections. Note that the player will have to re-buffer in the case that the new * track selection for the currently playing period differs from the one that was invalidated. * </ul> * * <h3>Renderer configuration</h3> * * The {@link TrackSelectorResult} returned by {@link #selectTracks(RendererCapabilities[], * TrackGroupArray, MediaPeriodId, Timeline)} contains not only {@link TrackSelection}s for each * renderer, but also {@link RendererConfiguration}s defining configuration parameters that the * renderers should apply when consuming the corresponding media. Whilst it may seem counter- * intuitive for a track selector to also specify renderer configuration information, in practice * the two are tightly bound together. It may only be possible to play a certain combination tracks * if the renderers are configured in a particular way. Equally, it may only be possible to * configure renderers in a particular way if certain tracks are selected. Hence it makes sense to * determined the track selection and corresponding renderer configurations in a single step. * * <h3>Threading model</h3> * * All calls made by the player into the track selector are on the player's internal playback * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()} * from any thread. */ public abstract class TrackSelector { } ProgressiveMediaSource(a class) extends BaseMediaSource(a class) extends Media Source(an interface) /** * Provides one period that loads data from a {@link Uri} and extracted using an {@link Extractor}. * * <p>If the possible input stream container formats are known, pass a factory that instantiates * extractors for them to the constructor. Otherwise, pass a {@link DefaultExtractorsFactory} to use * the default extractors. When reading a new stream, the first {@link Extractor} in the array of * extractors created by the factory that returns {@code true} from {@link Extractor#sniff} will be * used to extract samples from the input stream. * * <p>Note that the built-in extractor for FLV streams does not support seeking. */ public final class ProgressiveMediaSource extends BaseMediaSource implements ProgressiveMediaPeriod.Listener { /* Factory for creating instances of ProgressiveMediaSource class, using the extractors provided by {DefaultExtractorsFactory} (OR something else too, idk). */ public static final class Factory implements AdsMediaSource.MediaSourceFactory { ... ... public Factory(DataSource.Factory dataSourceFactory) { this(dataSourceFactory, new DefaultExtractorsFactory()); } .... } /** * Base {@link MediaSource} implementation to handle parallel reuse and to keep a list of {@link * MediaSourceEventListener}s. * * <p>Whenever an implementing subclass needs to provide a new timeline and/or manifest, it must * call {@link #refreshSourceInfo(Timeline, Object)} to notify all listeners. */ public abstract class BaseMediaSource implements MediaSource { private final ArrayList<SourceInfoRefreshListener> sourceInfoListeners; private final MediaSourceEventListener.EventDispatcher eventDispatcher; @Nullable private Looper looper; @Nullable private Timeline timeline; @Nullable private Object manifest; public BaseMediaSource() { sourceInfoListeners = new ArrayList<>(/* initialCapacity= */ 1); eventDispatcher = new MediaSourceEventListener.EventDispatcher(); } /** * Defines and provides media to be played by an {@link com.google.android.exoplayer2.ExoPlayer}. A * MediaSource has two main responsibilities: * * <ul> * <li>To provide the player with a {@link Timeline} defining the structure of its media, and to * provide a new timeline whenever the structure of the media changes. The MediaSource * provides these timelines by calling {@link SourceInfoRefreshListener#onSourceInfoRefreshed} * on the {@link SourceInfoRefreshListener}s passed to {@link * #prepareSource(SourceInfoRefreshListener, TransferListener)}. * <li>To provide {@link MediaPeriod} instances for the periods in its timeline. MediaPeriods are * obtained by calling {@link #createPeriod(MediaPeriodId, Allocator, long)}, and provide a * way for the player to load and read the media. * </ul> * * All methods are called on the player's internal playback thread, as described in the {@link * com.google.android.exoplayer2.ExoPlayer} Javadoc. They should not be called directly from * application code. Instances can be re-used, but only for one {@link * com.google.android.exoplayer2.ExoPlayer} instance simultaneously. */ public interface MediaSource { /** Listener for source events. */ interface SourceInfoRefreshListener { /** ... }","title":"Extras"},{"location":"tab_blogs/android/world_of_videos/#exo-resources","text":"https://android.jlelse.eu/streaming-video-on-android-using-exoplayer-3087d604095 This guy implements basic streaming but has some content that i haven't yet read. https://medium.com/@pawankgupta.se/live-video-streaming-using-exoplayer-2-x-41cc7f9301d6 basic video rendering using HLS http://www.tothenew.com/blog/playing-different-videos-with-exo-player-in-android-tv/ basic exoplayer. might have something new. https://blog.hotstar.com/when-hotstar-met-exoplayer-5b9ea500bd0 : good theory regarding exo https://github.com/Tubitv/TubiPlayer : tubi player : a player build around exoplayer","title":"exo resources :"},{"location":"tab_blogs/android/world_of_videos/#non-exo-player-resources","text":"Good article on how video straming woks : 1. https://www.swipetips.com/android-video-streaming-videoview-tutorial/ video view streaming 1. https://instagram-engineering.com/improving-video-playback-on-android-2f6c6a0058d 2. https://medium.com/@onix_systems/rtmp-protocol-enable-instant-video-streaming-for-android-apps-44cd9de6f339 3. http://www.tothenew.com/blog/adaptive-video-streaming-hls/ very good theory 3. https://medium.com/p/cddc0b1bf764/responses/show (bad , promotional content, but good theory) 4. https://medium.com/@judeosby/creating-a-video-streaming-app-in-android-using-mvvm-rxjava-pagination-library-and-the-normal-e7b120653d19 (good, practical one with github/open source use cases uses deprecated bvp player : https://github.com/halilozercan/BetterVideoPlayer) https://www.streamingmedia.com/Default.aspx website on streaming. https://imagen.io/resources/what-are-svod-tvod-avod/ : VOD business jw player : they have implemented everything we want.","title":"non exo player resources"},{"location":"tab_blogs/misc/daily_logs/","text":"Daily Logs # (Disclaimer: This is my personal daily log book, and i would be writing a lot of personal shit here without caring much about anyone. You might not wanna read it) 24/9/19 # SATURDAY! After an ass busting week of papers, i am happy to relax for sometime. I didn't applied for leave for today at my office, they are gonna cut the salary, damn :/ Also, fuck i didn't recieved pass for the devfest delhi :'( . Anyways today i am continuing my work with exoplayer from the last week, but before that , i am in a mood for learning something new : like making this site. i am torn between using mkdocs, jekyll wordpress or simply html/css . mkdocs is cool, but i still need to run 4 commands and update yaml everytime i add a page. It also has a lot of theme limitations and require knowledge of html/css to fix them. jekyll is also ok, but does not come with a defualy theme, You will have to create your own theme in order to make it look nice. but it too had support for external themes. But again, it had some stuff which needed to be updated manually. wordpress is something i am curious about. i heard it is somewhat paid, but a parts of it are free too . it is seen as a very advance version with all those tags and dynamic content support, but also needs html/css/js knowledge for advance customizations I don't wanna use html/css because i hate them(Damn, my biggest weakness: why i hate the most popular type of development in this industry, the web dev? Ugh, i don't know. so much shit goin on, so many tags, so much sophistication in small stuffs... i had to learn theses stuff, else i would lag behind... aagh fuck) Anyhoo, currently going with this mkdocs theme . did some refactoring in yml file, and about to add some general articles.","title":"Daily Logs"},{"location":"tab_blogs/misc/daily_logs/#daily-logs","text":"(Disclaimer: This is my personal daily log book, and i would be writing a lot of personal shit here without caring much about anyone. You might not wanna read it)","title":"Daily Logs"},{"location":"tab_blogs/misc/daily_logs/#24919","text":"SATURDAY! After an ass busting week of papers, i am happy to relax for sometime. I didn't applied for leave for today at my office, they are gonna cut the salary, damn :/ Also, fuck i didn't recieved pass for the devfest delhi :'( . Anyways today i am continuing my work with exoplayer from the last week, but before that , i am in a mood for learning something new : like making this site. i am torn between using mkdocs, jekyll wordpress or simply html/css . mkdocs is cool, but i still need to run 4 commands and update yaml everytime i add a page. It also has a lot of theme limitations and require knowledge of html/css to fix them. jekyll is also ok, but does not come with a defualy theme, You will have to create your own theme in order to make it look nice. but it too had support for external themes. But again, it had some stuff which needed to be updated manually. wordpress is something i am curious about. i heard it is somewhat paid, but a parts of it are free too . it is seen as a very advance version with all those tags and dynamic content support, but also needs html/css/js knowledge for advance customizations I don't wanna use html/css because i hate them(Damn, my biggest weakness: why i hate the most popular type of development in this industry, the web dev? Ugh, i don't know. so much shit goin on, so many tags, so much sophistication in small stuffs... i had to learn theses stuff, else i would lag behind... aagh fuck) Anyhoo, currently going with this mkdocs theme . did some refactoring in yml file, and about to add some general articles.","title":"24/9/19"},{"location":"tab_blogs/web/mkdocs/basic_syntax/","text":"Basic Syntax # image loaded from the web image loaded from img/logo.png image loaded from the web with a link(uses HTML) image loaded from img/logo.png with a link(uses HTML) if you are not seeing thisimage , well , simply put: if your blog resides in following directory: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---myblog.md | | | | then you should create a folder img in the z/ folder and add pics there and access it using .../img/imagename.png . so your final structure will be: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---img/ | | | | |-----imagename.png | | | |---myblog.md | | | | like this : Body copy # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum. Headings # The 3 rd level # The 4 th level # The 5 th level # The 6 th level # Headings with secondary text # The 3 rd level with secondary text # The 4 th level with secondary text # The 5 th level with secondary text # The 6 th level with secondary text # Blockquotes # Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur. Blockquote nesting # Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks # Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Lists # Unordered lists # Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Ordered lists # Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Definition lists # Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Code blocks # Inline # Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus. Listing # var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Horizontal rules # Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Data tables # Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est. Admonition # Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation # Add the following lines to your mkdocs.yml : markdown_extensions: - admonition Usage # Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title # By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title # Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks # Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees.EmployeeID, Employees.Name, Employees.Salary, Manager.Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees.ManagerID = Manager.EmployeeID WHERE Employees.EmployeeID = '087652'; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks # The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default. Types # Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note # Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Abstract # Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr Info # Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo Tip # Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success # Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Question # Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq Warning # Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure # Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger # Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug # Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Example # Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet Quote # Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Basic Syntax"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#basic-syntax","text":"image loaded from the web image loaded from img/logo.png image loaded from the web with a link(uses HTML) image loaded from img/logo.png with a link(uses HTML) if you are not seeing thisimage , well , simply put: if your blog resides in following directory: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---myblog.md | | | | then you should create a folder img in the z/ folder and add pics there and access it using .../img/imagename.png . so your final structure will be: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---img/ | | | | |-----imagename.png | | | |---myblog.md | | | | like this :","title":"Basic Syntax"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#body-copy","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum.","title":"Body copy"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#headings","text":"","title":"Headings"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-3rd-level","text":"","title":"The 3rd level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-4th-level","text":"","title":"The 4th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-5th-level","text":"","title":"The 5th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-6th-level","text":"","title":"The 6th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#blockquotes","text":"Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur.","title":"Blockquotes"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#blockquote-nesting","text":"Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa.","title":"Blockquote nesting"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#other-content-blocks","text":"Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Other content blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#lists","text":"","title":"Lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#unordered-lists","text":"Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam.","title":"Unordered lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#ordered-lists","text":"Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo.","title":"Ordered lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#definition-lists","text":"Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.","title":"Definition lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#code-blocks","text":"","title":"Code blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#inline","text":"Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.","title":"Inline"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#listing","text":"var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; };","title":"Listing"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#horizontal-rules","text":"Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.","title":"Horizontal rules"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#data-tables","text":"Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Data tables"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions: - admonition","title":"Installation"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#usage","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees.EmployeeID, Employees.Name, Employees.Salary, Manager.Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees.ManagerID = Manager.EmployeeID WHERE Employees.EmployeeID = '087652'; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#collapsible-blocks","text":"The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default.","title":"Collapsible blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#note","text":"Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#abstract","text":"Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr","title":"Abstract"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#info","text":"Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo","title":"Info"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#tip","text":"Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#success","text":"Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#question","text":"Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq","title":"Question"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#warning","text":"Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#failure","text":"Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#danger","text":"Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#bug","text":"Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#example","text":"Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet","title":"Example"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#quote","text":"Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"tab_edu/edu_details/","text":"Education details # Academic # Class 10 th Class 12 th Cambridge Foundation School, New Delhi, India. Cambridge Foundation School, New Delhi, India.(2016) batch of 2014 Batch of 2016 Central Board Of Secondary Education(CBSE) Central Board Of Secondary Education(CBSE) CGPA 9.0 76.4% B.Tech, Computer Science Engineering JIMS Engineering Management Technical Campus(JEMTEC) batch 2016-20 (Ongoing) GGSIP University CGPA 7.1 Non Academic # Certifications. # Google Certified Associate Android Developer I recently received Associate Android Developer Certification from Google. More details can be found here. Scholarships. # Winner of Edugrad Data Analytics Scholarship Reciepent of Google India Scholarship, First Round Reciepent of Facebook Pytorch Scholarship, First Round Courses. # Java Core Programming. Coding Blocks, Dwarka. Android App Development Basics. Coding Blocks, Dwarka.","title":"Education Details"},{"location":"tab_edu/edu_details/#education-details","text":"","title":"Education details"},{"location":"tab_edu/edu_details/#academic","text":"Class 10 th Class 12 th Cambridge Foundation School, New Delhi, India. Cambridge Foundation School, New Delhi, India.(2016) batch of 2014 Batch of 2016 Central Board Of Secondary Education(CBSE) Central Board Of Secondary Education(CBSE) CGPA 9.0 76.4% B.Tech, Computer Science Engineering JIMS Engineering Management Technical Campus(JEMTEC) batch 2016-20 (Ongoing) GGSIP University CGPA 7.1","title":"Academic"},{"location":"tab_edu/edu_details/#non-academic","text":"","title":"Non Academic"},{"location":"tab_edu/edu_details/#certifications","text":"Google Certified Associate Android Developer I recently received Associate Android Developer Certification from Google. More details can be found here.","title":" Certifications."},{"location":"tab_edu/edu_details/#scholarships","text":"Winner of Edugrad Data Analytics Scholarship Reciepent of Google India Scholarship, First Round Reciepent of Facebook Pytorch Scholarship, First Round","title":" Scholarships."},{"location":"tab_edu/edu_details/#courses","text":"Java Core Programming. Coding Blocks, Dwarka. Android App Development Basics. Coding Blocks, Dwarka.","title":" Courses."},{"location":"tab_projects/project_summary/","text":"Portfolio # 1. Company projects: # I have worked as an android developer intern with Coding Blocks, a coding institute, Claro India, an IOT based Agro-tech company and Cloud blocks, a Home Automation company. Claro India. # For claro India, I built 2 internal apps RMCRS-bluetooth and RMCRS-sms, which automated their usual workflow by automatically sending data to the server without manual interaction. CloudBlocks.in # For Cloudblocks India, I worked with their main software product, their android app as an Android Developer Intern. I fixed bugs in the code and added new features. The live app can be found here : 2. Personal projects(Android): # Water Manager : Water Intake Tracker and Reminder # An open source app built with Latest Jetpack components,Water manager is a full fledged Intake tracker app that can remind users to drink water, log their data and provide meaningful analysis. Links: Playstore | Github Self Notes # A UI focussed note taking app that can give pin-able notifications for each note. Uses latest Architecture Components and MVVM pattern. Links : Playstore B-Browser # A single screen mobile browser. made while learning about android WebView. Links: Github #100DaysOfCode # A utility reminder app to remind the user to code for 1 hr each day. Links: Github MyJIMS # One of my first full fledged app from 2017-18. Its an app for showing my college details. It Also has a chat-based announcement portal which uses Firebase Auth and Firebase Realtime Database as backend server. 9Notes # The first version of my note taking app. 2048 # A puzzle game. Attendance tracker # A simple way to track your subject wise Attendance manually. File Manager # Full fledged file manager using storage access framework (SAF Api). 2. Personal projects(Non Android): # \"Talk to Super jarvis\" # Super Jarvis a trivia on Marvel Avengers made for Google assistant. It does not need any installation, it simply works when a person says \"OK Google, Talk To Super Jarvis\".I was awarded with a branded T-shirt from Google, for building this. Links : Actions Store Venturebeat article analysis # The following project aims to display how the use of scrapy, matplotlib and NLTK library can be put together to get some meaningful analysis. Here we crawl around 600+ articles of december 2018 from a tech-news site Venturebeat.com , put them in a large text file, and then read that file using NLTK library to build a hashmap of unique words, filtering out the non usefult stopwords. Links : Actions Store","title":"Portfolio"},{"location":"tab_projects/project_summary/#portfolio","text":"","title":"Portfolio"},{"location":"tab_projects/project_summary/#1-company-projects","text":"I have worked as an android developer intern with Coding Blocks, a coding institute, Claro India, an IOT based Agro-tech company and Cloud blocks, a Home Automation company.","title":"1. Company projects:"},{"location":"tab_projects/project_summary/#claro-india","text":"For claro India, I built 2 internal apps RMCRS-bluetooth and RMCRS-sms, which automated their usual workflow by automatically sending data to the server without manual interaction.","title":"Claro India."},{"location":"tab_projects/project_summary/#cloudblocksin","text":"For Cloudblocks India, I worked with their main software product, their android app as an Android Developer Intern. I fixed bugs in the code and added new features. The live app can be found here :","title":"CloudBlocks.in"},{"location":"tab_projects/project_summary/#2-personal-projectsandroid","text":"","title":"2. Personal projects(Android):"},{"location":"tab_projects/project_summary/#water-manager-water-intake-tracker-and-reminder","text":"An open source app built with Latest Jetpack components,Water manager is a full fledged Intake tracker app that can remind users to drink water, log their data and provide meaningful analysis. Links: Playstore | Github","title":"Water Manager : Water Intake Tracker and Reminder"},{"location":"tab_projects/project_summary/#self-notes","text":"A UI focussed note taking app that can give pin-able notifications for each note. Uses latest Architecture Components and MVVM pattern. Links : Playstore","title":"Self Notes"},{"location":"tab_projects/project_summary/#b-browser","text":"A single screen mobile browser. made while learning about android WebView. Links: Github","title":"B-Browser"},{"location":"tab_projects/project_summary/#100daysofcode","text":"A utility reminder app to remind the user to code for 1 hr each day. Links: Github","title":"#100DaysOfCode"},{"location":"tab_projects/project_summary/#myjims","text":"One of my first full fledged app from 2017-18. Its an app for showing my college details. It Also has a chat-based announcement portal which uses Firebase Auth and Firebase Realtime Database as backend server.","title":"MyJIMS"},{"location":"tab_projects/project_summary/#9notes","text":"The first version of my note taking app.","title":"9Notes"},{"location":"tab_projects/project_summary/#2048","text":"A puzzle game.","title":"2048"},{"location":"tab_projects/project_summary/#attendance-tracker","text":"A simple way to track your subject wise Attendance manually.","title":"Attendance tracker"},{"location":"tab_projects/project_summary/#file-manager","text":"Full fledged file manager using storage access framework (SAF Api).","title":"File Manager"},{"location":"tab_projects/project_summary/#2-personal-projectsnon-android","text":"","title":"2. Personal projects(Non Android):"},{"location":"tab_projects/project_summary/#talk-to-super-jarvis","text":"Super Jarvis a trivia on Marvel Avengers made for Google assistant. It does not need any installation, it simply works when a person says \"OK Google, Talk To Super Jarvis\".I was awarded with a branded T-shirt from Google, for building this. Links : Actions Store","title":"\"Talk to Super jarvis\""},{"location":"tab_projects/project_summary/#venturebeat-article-analysis","text":"The following project aims to display how the use of scrapy, matplotlib and NLTK library can be put together to get some meaningful analysis. Here we crawl around 600+ articles of december 2018 from a tech-news site Venturebeat.com , put them in a large text file, and then read that file using NLTK library to build a hashmap of unique words, filtering out the non usefult stopwords. Links : Actions Store","title":"Venturebeat article analysis"},{"location":"tab_work_exp/work_exp/","text":"Work Experience # [--image--] | ## Company name | my position | mmm,yy -mmm,yy (x months) | description","title":"Work Experience"},{"location":"tab_work_exp/work_exp/#work-experience","text":"[--image--] | ## Company name | my position | mmm,yy -mmm,yy (x months) | description","title":"Work Experience"}]}